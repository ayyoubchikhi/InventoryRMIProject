package client;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import server.InventoryInterface;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;

public class ClientGUI extends Application {
    private InventoryInterface inventoryService;
    private TextArea productListArea;

    @Override
    public void start(Stage primaryStage) {
        try {
            // Connexion RMI
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
            inventoryService = (InventoryInterface) registry.lookup("InventoryService");

            // Authentification
            boolean isAuthenticated = showLoginScreen();
            if (!isAuthenticated) {
                System.exit(0);
            }

            primaryStage.setTitle("Gestion d'Inventaire");

            // Layout principal
            VBox mainLayout = new VBox(10);
            mainLayout.setPadding(new Insets(15));

            // Sections CRUD et Recherche
            GridPane addProductPane = createAddProductSection();
            GridPane updateQuantityPane = createUpdateQuantitySection();
            GridPane deleteProductPane = createDeleteProductSection();
            GridPane searchSection = createSearchSection();

            // Section Liste Produits
            productListArea = new TextArea();
            productListArea.setEditable(false);
            Button refreshButton = new Button("Actualiser Liste");
            refreshButton.setOnAction(e -> refreshProductList());

            mainLayout.getChildren().addAll(
                addProductPane,
                updateQuantityPane,
                deleteProductPane,
                searchSection,
                refreshButton,
                productListArea
            );

            Scene scene = new Scene(mainLayout, 700, 800);
            primaryStage.setScene(scene);
            primaryStage.show();

            // Charger la liste initiale
            refreshProductList();

        } catch (Exception e) {
            showAlert("Erreur de connexion", "Impossible de se connecter au serveur RMI");
            e.printStackTrace();
        }
    }

    private boolean showLoginScreen() {
        Dialog<Boolean> dialog = new Dialog<>();
        dialog.setTitle("Connexion");
        dialog.setHeaderText("Veuillez vous connecter pour accéder au système");

        // Layout
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 10, 10, 10));

        TextField usernameField = new TextField();
        usernameField.setPromptText("Nom d'utilisateur");
        PasswordField passwordField = new PasswordField();
        passwordField.setPromptText("Mot de passe");

        grid.add(new Label("Nom d'utilisateur:"), 0, 0);
        grid.add(usernameField, 1, 0);
        grid.add(new Label("Mot de passe:"), 0, 1);
        grid.add(passwordField, 1, 1);

        dialog.getDialogPane().setContent(grid);
        ButtonType loginButtonType = new ButtonType("Connexion", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(loginButtonType, ButtonType.CANCEL);

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == loginButtonType) {
                try {
                    return inventoryService.authenticate(
                        usernameField.getText().trim(),
                        passwordField.getText().trim()
                    );
                } catch (Exception e) {
                    showAlert("Erreur", "Erreur d'authentification : " + e.getMessage());
                }
            }
            return false;
        });

        return dialog.showAndWait().orElse(false);
    }

    private GridPane createAddProductSection() {
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 10, 20, 10));

        Label titleLabel = new Label("Ajouter un Produit");
        titleLabel.setStyle("-fx-font-weight: bold");
        grid.add(titleLabel, 0, 0, 2, 1);

        grid.add(new Label("Nom:"), 0, 1);
        TextField nameField = new TextField();
        grid.add(nameField, 1, 1);

        grid.add(new Label("Catégorie:"), 0, 2);
        TextField categoryField = new TextField();
        grid.add(categoryField, 1, 2);

        grid.add(new Label("Quantité:"), 0, 3);
        TextField quantityField = new TextField();
        grid.add(quantityField, 1, 3);

        grid.add(new Label("Prix:"), 0, 4);
        TextField priceField = new TextField();
        grid.add(priceField, 1, 4);

        Button addButton = new Button("Ajouter");
        addButton.setOnAction(e -> {
            try {
                inventoryService.addProduct(
                    nameField.getText().trim(),
                    categoryField.getText().trim(),
                    Integer.parseInt(quantityField.getText().trim()),
                    Double.parseDouble(priceField.getText().trim())
                );
                showAlert("Succès", "Produit ajouté avec succès");
                refreshProductList();
                nameField.clear();
                categoryField.clear();
                quantityField.clear();
                priceField.clear();
            } catch (NumberFormatException ex) {
                showAlert("Erreur", "Quantité et prix doivent être des nombres valides");
            } catch (Exception ex) {
                showAlert("Erreur", "Impossible d'ajouter le produit : " + ex.getMessage());
            }
        });
        grid.add(addButton, 1, 5);

        return grid;
    }

    private GridPane createUpdateQuantitySection() {
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 10, 20, 10));

        Label titleLabel = new Label("Mettre à Jour la Quantité");
        titleLabel.setStyle("-fx-font-weight: bold");
        grid.add(titleLabel, 0, 0, 2, 1);

        grid.add(new Label("Nom du Produit:"), 0, 1);
        TextField nameField = new TextField();
        grid.add(nameField, 1, 1);

        grid.add(new Label("Nouvelle Quantité:"), 0, 2);
        TextField quantityField = new TextField();
        grid.add(quantityField, 1, 2);

        Button updateButton = new Button("Mettre à Jour");
        updateButton.setOnAction(e -> {
            try {
                String name = nameField.getText().trim();
                int quantity = Integer.parseInt(quantityField.getText().trim());

                inventoryService.updateProductQuantity(name, quantity);
                showAlert("Succès", "Quantité mise à jour avec succès");
                refreshProductList();

                nameField.clear();
                quantityField.clear();
            } catch (NumberFormatException ex) {
                showAlert("Erreur", "La quantité doit être un nombre valide");
            } catch (Exception ex) {
                showAlert("Erreur", "Impossible de mettre à jour : " + ex.getMessage());
            }
        });
        grid.add(updateButton, 1, 3);

        return grid;
    }

    private GridPane createDeleteProductSection() {
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 10, 20, 10));

        Label titleLabel = new Label("Supprimer un Produit");
        titleLabel.setStyle("-fx-font-weight: bold");
        grid.add(titleLabel, 0, 0, 2, 1);

        grid.add(new Label("Nom du Produit:"), 0, 1);
        TextField nameField = new TextField();
        grid.add(nameField, 1, 1);

        Button deleteButton = new Button("Supprimer");
        deleteButton.setOnAction(e -> {
            try {
                inventoryService.removeProduct(nameField.getText().trim());
                showAlert("Succès", "Produit supprimé avec succès");
                refreshProductList();
                nameField.clear();
            } catch (Exception ex) {
                showAlert("Erreur", "Impossible de supprimer le produit : " + ex.getMessage());
            }
        });
        grid.add(deleteButton, 1, 2);

        return grid;
    }

    private GridPane createSearchSection() {
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 10, 20, 10));

        Label titleLabel = new Label("Rechercher des Produits");
        titleLabel.setStyle("-fx-font-weight: bold");
        grid.add(titleLabel, 0, 0, 2, 1);

        grid.add(new Label("Nom ou Catégorie:"), 0, 1);
        TextField searchField = new TextField();
        grid.add(searchField, 1, 1);

        Button searchButton = new Button("Rechercher");
        searchButton.setOnAction(e -> {
            try {
                List<String> results = inventoryService.searchProductsByName(searchField.getText().trim());
                productListArea.setText(String.join("\n", results));
            } catch (Exception ex) {
                showAlert("Erreur", "Impossible de rechercher : " + ex.getMessage());
            }
        });
        grid.add(searchButton, 1, 2);

        return grid;
    }

    private void refreshProductList() {
        try {
            productListArea.setText(String.join("\n", inventoryService.getAllProducts()));
        } catch (Exception e) {
            showAlert("Erreur", "Impossible de rafraîchir la liste : " + e.getMessage());
        }
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
